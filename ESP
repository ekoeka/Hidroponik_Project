#include <Wire.h>
#include <RTClib.h>
#include <SPI.h>
#include <SD.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Inisialisasi RTC
RTC_DS3231 rtc;

// Pin untuk SD Card
const int chipSelect = D8;

// Inisialisasi server web
ESP8266WebServer server(80);

// Variabel konfigurasi
float maxWaterLevel, minWaterLevel, maxTemp, minTemp, maxPH, minPH, maxTDS, minTDS;

void setup() {
  Wire.begin(D2, D1); // SDA, SCL
  rtc.begin();
  Serial.begin(115200);

  // Inisialisasi SD Card
  if (!SD.begin(chipSelect)) {
    Serial.println("Initialization failed!");
    return;
  }
  Serial.println("Initialization done.");

  Wire.begin(8); // Inisialisasi I2C sebagai slave dengan alamat 8
  Wire.onReceive(receiveEvent);

  // Set waktu RTC jika belum diatur
  if (!rtc.isrunning()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  // Inisialisasi WiFi
  WiFi.begin("SSID", "PASSWORD");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Inisialisasi server web
  server.on("/", handleRoot);
  server.on("/update", handleUpdate);
  server.begin();
  Serial.println("HTTP server started");

  // Membaca konfigurasi dari SD Card
  readConfig();
}

void loop() {
  server.handleClient();
}

void receiveEvent(int howMany) {
  int distance = Wire.read();
  int waterLevel = Wire.read();
  int phValue = Wire.read();
  int tdsValue = Wire.read();
  int temperature = Wire.read();

  // Membaca waktu dari RTC
  DateTime now = rtc.now();

  // Menyimpan data ke SD Card
  File dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (dataFile) {
    dataFile.print("Time: ");
    dataFile.print(now.hour());
    dataFile.print(':');
    dataFile.print(now.minute());
    dataFile.print(':');
    dataFile.print(now.second());
    dataFile.print(", Dist: ");
    dataFile.print(distance);
    dataFile.print(" cm, Temp: ");
    dataFile.print(temperature);
    dataFile.print(" C, pH: ");
    dataFile.print(phValue);
    dataFile.print(", TDS: ");
    dataFile.print(tdsValue);
    dataFile.print(", Water Level: ");
    dataFile.println(waterLevel);
    dataFile.close();
    Serial.println("Data written to SD card.");
  } else {
    Serial.println("Error opening datalog.txt");
  }
}

void handleRoot() {
  String html = "<html><body><h1>Hydroponics Configuration</h1>";
  html += "<form action='/update' method='GET'>";
  html += "Max Water Level: <input type='text' name='maxWaterLevel' value='" + String(maxWaterLevel) + "'><br>";
  html += "Min Water Level: <input type='text' name='minWaterLevel' value='" + String(minWaterLevel) + "'><br>";
  html += "Max Temperature: <input type='text' name='maxTemp' value='" + String(maxTemp) + "'><br>";
  html += "Min Temperature: <input type='text' name='minTemp' value='" + String(minTemp) + "'><br>";
  html += "Max pH: <input type='text' name='maxPH' value='" + String(maxPH) + "'><br>";
  html += "Min pH: <input type='text' name='minPH' value='" + String(minPH) + "'><br>";
  html += "Max TDS: <input type='text' name='maxTDS' value='" + String(maxTDS) + "'><br>";
  html += "Min TDS: <input type='text' name='minTDS' value='" + String(minTDS) + "'><br>";
  html += "<input type='submit' value='Update'>";
  html += "</form></body></html>";
  server.send(200, "text/html", html);
}

void handleUpdate() {
  if (server.hasArg("maxWaterLevel")) maxWaterLevel = server.arg("maxWaterLevel").toFloat();
  if (server.hasArg("minWaterLevel")) minWaterLevel = server.arg("minWaterLevel").toFloat();
  if (server.hasArg("maxTemp")) maxTemp = server.arg("maxTemp").toFloat();
  if (server.hasArg("minTemp")) minTemp = server.arg("minTemp").toFloat();
  if (server.hasArg("maxPH")) maxPH = server.arg("maxPH").toFloat();
  if (server.hasArg("minPH")) minPH = server.arg("minPH").toFloat();
  if (server.hasArg("maxTDS")) maxTDS = server.arg("maxTDS").toFloat();
  if (server.hasArg("minTDS")) minTDS = server.arg("minTDS").toFloat();

  writeConfig(maxWaterLevel, minWaterLevel, maxTemp, minTemp, maxPH, minPH, maxTDS, minTDS);

  server.send(200, "text/html", "<html><body><h1>Configuration Updated</h1><a href='/'>Back</a></body></html>");
}

void readConfig() {
  File configFile = SD.open("config.txt");
  if (configFile) {
    maxWaterLevel = configFile.parseFloat();
    minWaterLevel = configFile.parseFloat();
    maxTemp = configFile.parseFloat();
    minTemp = configFile.parseFloat();
    maxPH = configFile.parseFloat();
    minPH = configFile.parseFloat();
    maxTDS = configFile.parseFloat();
    minTDS = configFile.parseFloat();
    configFile.close();
  } else {
    Serial.println("Error opening config.txt");
  }
}

void writeConfig(float maxWaterLevel, float minWaterLevel, float maxTemp, float minTemp, float maxPH, float minPH, float maxTDS, float minTDS) {
  File configFile = SD.open("config.txt", FILE_WRITE);
  if (configFile) {
    configFile.print(maxWaterLevel);
    configFile.print(" ");
    configFile.print(minWaterLevel);
    configFile.print(" ");
    configFile.print(maxTemp);
    configFile.print(" ");
    configFile.print(minTemp);
    configFile.print(" ");
    configFile.print(maxPH);
    configFile.print(" ");
    configFile.print(minPH);
    configFile.print(" ");
    configFile.print(maxTDS);
    configFile.print(" ");
    configFile.print(minTDS);
    configFile.close();
  } else {
    Serial.println("Error opening config.txt");
  }
}
